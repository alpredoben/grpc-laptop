// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: laptop_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LaptopServicesClient is the client API for LaptopServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LaptopServicesClient interface {
	CreateLaptop(ctx context.Context, in *CreateLaptopRequest, opts ...grpc.CallOption) (*CreateLaptopResponse, error)
}

type laptopServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewLaptopServicesClient(cc grpc.ClientConnInterface) LaptopServicesClient {
	return &laptopServicesClient{cc}
}

func (c *laptopServicesClient) CreateLaptop(ctx context.Context, in *CreateLaptopRequest, opts ...grpc.CallOption) (*CreateLaptopResponse, error) {
	out := new(CreateLaptopResponse)
	err := c.cc.Invoke(ctx, "/gocpu.LaptopServices/CreateLaptop", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LaptopServicesServer is the server API for LaptopServices service.
// All implementations must embed UnimplementedLaptopServicesServer
// for forward compatibility
type LaptopServicesServer interface {
	CreateLaptop(context.Context, *CreateLaptopRequest) (*CreateLaptopResponse, error)
	mustEmbedUnimplementedLaptopServicesServer()
}

// UnimplementedLaptopServicesServer must be embedded to have forward compatible implementations.
type UnimplementedLaptopServicesServer struct {
}

func (UnimplementedLaptopServicesServer) CreateLaptop(context.Context, *CreateLaptopRequest) (*CreateLaptopResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateLaptop not implemented")
}
func (UnimplementedLaptopServicesServer) mustEmbedUnimplementedLaptopServicesServer() {}

// UnsafeLaptopServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LaptopServicesServer will
// result in compilation errors.
type UnsafeLaptopServicesServer interface {
	mustEmbedUnimplementedLaptopServicesServer()
}

func RegisterLaptopServicesServer(s grpc.ServiceRegistrar, srv LaptopServicesServer) {
	s.RegisterService(&LaptopServices_ServiceDesc, srv)
}

func _LaptopServices_CreateLaptop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateLaptopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LaptopServicesServer).CreateLaptop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gocpu.LaptopServices/CreateLaptop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LaptopServicesServer).CreateLaptop(ctx, req.(*CreateLaptopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LaptopServices_ServiceDesc is the grpc.ServiceDesc for LaptopServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LaptopServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gocpu.LaptopServices",
	HandlerType: (*LaptopServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateLaptop",
			Handler:    _LaptopServices_CreateLaptop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "laptop_service.proto",
}
